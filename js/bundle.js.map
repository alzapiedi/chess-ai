{"version":3,"sources":["webpack/bootstrap c850c755c21334f37ea7","./js/game.js","./js/display.js","./js/board.js","./js/pieces.js","./js/utils.js","./js/sliding.js","./js/stepping.js","./js/ai.js","./js/boardnode.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH,wE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACxID;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB,QAAQ;AACzB;AACA,uBAAsB,+CAA+C;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACzFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,cAAc;AACrC;AACA;;AAEA;AACA,gBAAe,kDAAkD;AACjE;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,wBAAuB,6DAA6D;AACpF,MAAK;AACL,0BAAyB,6DAA6D;AACtF,MAAK;AACL,wBAAuB,6DAA6D;AACpF,MAAK;AACL,0BAAyB,6DAA6D;AACtF,MAAK;AACL,yBAAwB,6DAA6D;AACrF,MAAK;AACL,wBAAuB,6DAA6D;AACpF;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,sBAAqB,wCAAwC;AAC7D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D,qBAAoB,wCAAwC;AAC5D,qBAAoB,wCAAwC;AAC5D,oBAAmB,wCAAwC;AAC3D,oBAAmB,wCAAwC;AAC3D;;AAEA;;;;;;;ACjMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAU;AACV;;AAEA;AACA;AACA,kBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrRA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;;AAGA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,iBAAiB;AACpC,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,kBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA8C;AAC9C;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA,wBAAuB,gDAAgD;AACvE;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;ACxLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAqD;AACrD;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA,wBAAuB,gDAAgD;AACvE;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c850c755c21334f37ea7\n **/","var Display = require('./display'),\n    AI = require('./ai');\n\nvar Game = function () {\n  var $el = $('#game');\n  this.display = new Display($el);\n  this.turn = \"white\";\n  this.display.setupGrid();\n  this.display.render();\n  this.board = this.display.board;\n  this.cpuPlayer = new AI(this.board, \"black\");\n  this.display.setListeners(this);\n  this.states = [this.board.clone()];\n}\n\nGame.prototype.chooseMove = function () {\n  this.display.selectPos(this.setStart.bind(this));\n}\n\nGame.prototype.validStart = function (pos) {\n  var board = this.board;\n  return (board.isOccupied(pos) && board.piece(pos).color == this.turn);\n}\n\nGame.prototype.setStart = function (pos) {\n  if (this.validStart(pos)) {\n    this.startPos = pos;\n    this.display.select(pos);\n    var piece = this.board.piece(pos);\n    if (piece.toString() === \"king\") {\n      piece.moves().forEach(function (move) {\n        if (!piece.moveThroughCheck(move)) {\n          this.display.select(move);\n        }\n      }.bind(this));\n    } else {\n      piece.moves().forEach(function (move) {\n        if (!piece.moveIntoCheck(move)) {\n          this.display.select(move);\n        }\n      }.bind(this));\n    }\n    this.chooseEnd();\n  } else if (!this.board.isOccupied(pos)) {\n    this.chooseMove();\n    this.display.flashError(\"No piece there\");\n  } else {\n    this.chooseMove();\n    this.display.flashError(\"Wrong color piece\");\n  }\n}\n\nGame.prototype.switchTurns = function () {\n  this.turn = this.turn === \"white\" ? \"black\" : \"white\";\n  if (this.board.checkmate(this.turn)) {\n    this.gameOver();\n  } else {\n    var info = this.turn === \"white\" ? \"Your turn\" : \"Computer's turn\"; \n    if (this.turn === \"white\" && this.board.inCheck(this.turn)) {\n      info += \" (CHECK)\";\n    }\n    this.display.info(info);\n    var cpuMove\n    if (this.turn === \"black\") {\n      this.display.unselect();\n      this.display.render();\n      setTimeout(function () {\n        cpuMove = this.cpuPlayer.getMove();\n        this.board.move(cpuMove[0], cpuMove[1]);\n        this.switchTurns();\n        this.display.render();\n      }.bind(this), 500);\n    }\n  }\n}\n\nGame.prototype.gameOver = function () {\n  var winner = this.turn === \"white\" ? \"Black\" : \"White\";\n  this.display.info(\"Checkmate. \" + winner + \" wins!\");\n}\n\nGame.prototype.chooseEnd = function () {\n  this.display.selectPos(this.setEnd.bind(this));\n}\n\nGame.prototype.setEnd = function (pos) {\n  var board = this.board;\n  var piece = board.piece(this.startPos);\n  if (piece.validMove(pos)) {\n    this.display.unselect();\n    this.display.render();\n    board.move(this.startPos, pos);\n    this.states.push(board.clone());\n    this.switchTurns();\n    this.chooseMove();\n  } else if (!this.board.inCheck(piece.color) && piece.moveIntoCheck(pos)) {\n    this.display.flashError(\"Cannot move into check\");\n    this.display.unselect();\n    this.chooseMove();\n  } else if (this.board.inCheck(piece.color) && piece.moveIntoCheck(pos)) {\n    this.display.flashError(\"You are in check\");\n    this.display.unselect();\n    this.chooseMove();\n  } else {\n    this.display.flashError(\"Illegal move\");\n    this.display.unselect();\n    this.chooseMove();\n  }\n}\n\nGame.prototype.undoMove = function () {\n  if (this.states.length === 1) {\n    this.display.flashError(\"No moves made\");\n  } else {\n    this.states.pop();\n    this.board = this.states[this.states.length - 1].clone();\n    this.switchTurns();\n    this.display.setBoard(this.board);\n    this.display.render();\n    this.chooseMove();\n  }\n}\n\nGame.prototype.newGame = function () {\n  this.display.clearListener();\n  delete this;\n  var g = new Game();\n  g.chooseMove();\n}\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var g = new Game();\n  window.g = g;\n  g.chooseMove();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require('./board'),\n    Utils = require('./utils');\n\nvar Display = function ($el) {\n  this.$el = $el;\n  this.board = new Board();\n  this.board.populate();\n  this.info(\"Your turn\");\n}\n\nDisplay.prototype.setupGrid = function () {\n  this.$el.append(\"<ul>\");\n  var $ul = $(\"<ul>\").addClass(\"chess-grid group\");\n  var color = \"black\";\n  for (var i = 0; i < 64; i++) {\n    var pos = [parseInt(i / 8), i % 8];\n    if (i % 8 === 0) { color = color === \"white\" ? \"black\" : \"white\"; }\n    $(\"<li>\").addClass(\"square \"+color).data(\"pos\", pos).appendTo($ul);\n    color = color === \"white\" ? \"black\" : \"white\";\n  }\n  this.$el.html($ul);\n}\n\nDisplay.prototype.setBoard = function (board) {\n  this.board = board;\n}\n\nDisplay.prototype.select = function (pos) {\n  $('li').each(function (i, el) {\n    if (Utils.arrayEquals($(el).data(\"pos\"), pos)) {\n      $(el).addClass(\"selected\");\n    }\n  });\n}\n\nDisplay.prototype.unselect = function () {\n  $('li').each(function (i, el) {\n    $(el).removeClass(\"selected\");\n  });\n}\n\nDisplay.prototype.render = function () {\n  var pos, square;\n  var pieces = this.board.pieces();\n  $('li').each(function (i, el) {\n    square = $(el).attr(\"class\").split(\" \").slice(0,2).join(\" \");\n    $(el).removeClass();\n    $(el).addClass(square);\n    pieces.forEach(function (piece) {\n      if (Utils.arrayEquals($(el).data(\"pos\"), piece.pos)) {\n        $(el).addClass(piece.toString() + \"-\" + piece.color).addClass(\"piece\");\n      }\n    })\n  });\n}\n\nDisplay.prototype.selectPos = function (callback) {\n  this.selectListener = $('.chess-grid').on('click', function (e) {\n    $('#errors').html(\"\");\n    var pos = $(e.target).data(\"pos\");\n    pos && this.selectListener.off('click') && callback(pos);\n  }.bind(this));\n}\n\nDisplay.prototype.setListeners = function (game) {\n    this.newGameListener = $('#new-game').on('click', function () {\n    game.newGame();\n  });\n}\n\nDisplay.prototype.clearListener = function () {\n  this.selectListener && this.selectListener.off('click');\n  this.undoListener && this.undoListener.off('click');\n  this.newGameListener && this.newGameListener.off('click');\n}\n\nDisplay.prototype.flashError = function (error) {\n  $div = $(document.getElementById('errors'));\n  $div.html(error);\n  setTimeout(function() {\n    $div.html(\"\");\n  }, 1500);\n}\n\nDisplay.prototype.info = function (info) {\n  $div = $(document.getElementById('info'));\n  $div.html(info);\n}\n\nmodule.exports = Display;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/display.js\n ** module id = 1\n ** module chunks = 0\n **/","var Pieces = require('./pieces'),\n    Utils = require('./utils');\n\nvar Board = function () {\n  this.grid = [];\n  this.cloned = false;\n  this.whitePieces = [];\n  this.blackPieces = [];\n  for (var i = 0; i < 8; i++) {\n    this.grid.push([null,null,null,null,null,null,null,null]);\n  }\n}\n\nBoard.prototype.checkmate = function (color) {\n  var pieces = this.pieces(color);\n  var moves;\n  for (var i = 0; i < pieces.length; i++) {\n    moves = pieces[i].moves();\n    for (var j = 0; j < moves.length; j++) {\n      if (!pieces[i].moveIntoCheck(moves[j])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nBoard.prototype.setPiece = function (piece) {\n  var pos = piece.pos;\n  this.grid[pos[0]][pos[1]] = piece;\n}\n\nBoard.prototype.isOccupied = function (pos) {\n  if (!this.inBounds) { return false; }\n  return !(this.grid[pos[0]][pos[1]] === null);\n}\n\nBoard.prototype.pieces = function (color) {\n  if (!color) { return this.whitePieces.concat(this.blackPieces); }\n  if (color === \"white\") {\n    return this.whitePieces;\n  } else if (color === \"black\") {\n    return this.blackPieces;\n  }\n}\n\nBoard.prototype.piece = function (pos) {\n  return this.grid[pos[0]][pos[1]];\n}\n\nBoard.prototype.findKing = function (color) {\n  var pos;\n  this.pieces(color).forEach(function (piece) {\n    if (piece.toString() === \"king\") {\n      pos = piece.pos;\n    }\n  });\n  return pos;\n}\n\n\nBoard.prototype.inCheck = function (color) {\n  var otherColor = color === \"white\" ? \"black\" : \"white\";\n  var moves;\n  var pieces = this.pieces(otherColor);\n  var kingPos = this.findKing(color);\n  for (var i = 0; i < pieces.length; i++) {\n    moves = pieces[i].moves();\n    for (var j = 0; j < moves.length; j++) {\n      if (Utils.arrayEquals(moves[j], kingPos)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nBoard.prototype.removePiece = function (piece) {\n  var idx;\n  if (piece.color === \"white\") {\n    idx = this.whitePieces.indexOf(piece);\n    this.whitePieces.splice(idx,1);\n  } else {\n    idx = this.blackPieces.indexOf(piece);\n    this.blackPieces.splice(idx,1);\n  }\n}\n\nBoard.prototype.move = function (startPos, endPos) {\n  var piece = this.piece(startPos);\n  var captured = false;\n  piece.moved = true;\n  if (piece.toString() === \"pawn\" && Math.abs(endPos[1] - startPos[1]) === 1 && !this.isOccupied(endPos)) {\n    if (piece.color === \"white\") {\n      var pos = [endPos[0] + 1, endPos[1]];\n      this.grid[pos[0]][pos[1]] = null;\n    } else {\n      var pos = [endPos[0] - 1, endPos[1]];\n      this.grid[pos[0]][pos[1]] = null;\n    }\n  }\n  if (piece.toString() === \"king\" && endPos[1] - startPos[1] === 2) {\n    var rook = this.piece([startPos[0], 7]);\n    rook.setPos([startPos[0], 5]);\n    this.grid[startPos[0]][5] = rook;\n  }\n  if (piece.toString() === \"king\" && endPos[1] - startPos[1] === -2) {\n    var rook = this.piece([startPos[0], 0])\n    rook.setPos([startPos[0], 3]);\n    this.grid[startPos[0]][3] = rook;\n  }\n  if (this.isOccupied(endPos)) {\n    this.removePiece(this.piece(endPos));\n  }\n  piece.setPos(endPos);\n  this.grid[endPos[0]][endPos[1]] = piece;\n  this.grid[startPos[0]][startPos[1]] = null;\n  if (piece.toString() === \"pawn\" && Math.abs(endPos[0] - startPos[0]) === 2) {\n    piece.setPassant();\n  }\n}\n\nBoard.prototype.inBounds = function (pos) {\n  return pos[0] >= 0 && pos[1] >= 0 && pos[0] < 8 && pos[1] < 8;\n}\n\nBoard.prototype.clone = function () {\n  var passants = [];\n  this.pieces().forEach(function (piece) {\n    if (piece.toString() === \"pawn\" && piece.passant) {\n      passants.push(piece.pos);\n    }\n  });\n  var pieces = this.pieces().map(function (piece) {\n    return piece.getAttr();\n  });\n  var clonedBoard = new Board();\n  pieces.forEach(function (pieceObj) {\n    if (pieceObj.type === \"pawn\") {\n      new Pieces.Pawn({color: pieceObj.color, pos: pieceObj.pos, board: clonedBoard});\n    } else if (pieceObj.type === \"bishop\") {\n      new Pieces.Bishop({color: pieceObj.color, pos: pieceObj.pos, board: clonedBoard});\n    } else if (pieceObj.type === \"rook\") {\n      new Pieces.Rook({color: pieceObj.color, pos: pieceObj.pos, board: clonedBoard});\n    } else if (pieceObj.type === \"knight\") {\n      new Pieces.Knight({color: pieceObj.color, pos: pieceObj.pos, board: clonedBoard});\n    } else if (pieceObj.type === \"queen\") {\n      new Pieces.Queen({color: pieceObj.color, pos: pieceObj.pos, board: clonedBoard});\n    } else if (pieceObj.type === \"king\") {\n      new Pieces.King({color: pieceObj.color, pos: pieceObj.pos, board: clonedBoard});\n    }\n  });\n  passants.forEach(function (pos) {\n    clonedBoard.piece(pos).setPassant();\n  });\n  return clonedBoard;\n}\n\nBoard.prototype.populate = function () {\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,0]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,1]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,2]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,3]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,4]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,5]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,6]});\n  new Pieces.Pawn({color: \"black\", board: this, pos: [1,7]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,0]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,1]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,2]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,3]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,4]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,5]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,6]});\n  new Pieces.Pawn({color: \"white\", board: this, pos: [6,7]});\n  new Pieces.Bishop({color: \"white\", board: this, pos: [7,2]});\n  new Pieces.Bishop({color: \"white\", board: this, pos: [7,5]});\n  new Pieces.Bishop({color: \"black\", board: this, pos: [0,2]});\n  new Pieces.Bishop({color: \"black\", board: this, pos: [0,5]});\n  new Pieces.Knight({color: \"white\", board: this, pos: [7,1]});\n  new Pieces.Knight({color: \"white\", board: this, pos: [7,6]});\n  new Pieces.Knight({color: \"black\", board: this, pos: [0,1]});\n  new Pieces.Knight({color: \"black\", board: this, pos: [0,6]});\n  new Pieces.Rook({color: \"white\", board: this, pos: [7,0]});\n  new Pieces.Rook({color: \"white\", board: this, pos: [7,7]});\n  new Pieces.Rook({color: \"black\", board: this, pos: [0,7]});\n  new Pieces.Rook({color: \"black\", board: this, pos: [0,0]});\n  new Pieces.Queen({color: \"white\", board: this, pos: [7,3]});\n  new Pieces.Queen({color: \"black\", board: this, pos: [0,3]});\n  new Pieces.King({color: \"black\", board: this, pos: [0,4]});\n  new Pieces.King({color: \"white\", board: this, pos: [7,4]});\n}\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/board.js\n ** module id = 2\n ** module chunks = 0\n **/","var Utils = require('./utils'),\n    Sliding = require('./sliding'),\n    Stepping = require('./stepping');\n\nvar Piece = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  this.pos = attrs.pos;\n  this.enemy_color = this.color === \"white\" ? \"black\" : \"white\";\n}\n\nPiece.CARDINALS = [[-1, 0], [1, 0], [0, -1], [0, 1]];\nPiece.DIAGONALS = [[-1, -1], [-1, 1], [1, 1], [1, -1]];\n\nPiece.prototype.setPos = function (pos) {\n  this.pos = pos;\n}\n\nPiece.prototype.getAttr = function () {\n  return {color: this.color, pos: this.pos, type: this.toString()};\n}\n\nPiece.prototype.validMove = function (pos) {\n  var moves = this.moves();\n  for (var i = 0; i < moves.length; i++) {\n    if (Utils.arrayEquals(moves[i], pos) && !this.moveIntoCheck(pos)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nPiece.prototype.moveIntoCheck = function (endPos) {\n  var color = this.color;\n  var testBoard = this.board.clone();\n  testBoard.cloned = true;\n  testBoard.move(this.pos, endPos);\n  return testBoard.inCheck(color);\n}\n\nvar Pawn = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  if (this.color === \"white\") {\n    this.board.whitePieces.push(this);\n  } else {\n    this.board.blackPieces.push(this);\n  }\n  this.pos = attrs.pos;\n  this.value = 10;\n  this.passant = false;\n  this.moves = Stepping.moves.bind(this);\n  this.board.setPiece(this);\n}\n\nUtils.inherits(Pawn, Piece);\nPawn.prototype.getMoveDirs = function () {\n  var deltas = [];\n  var startingRank = this.color === \"white\" ? 6 : 1;\n  var direction = this.color === \"white\" ? -1 : 1;\n  var oneStepForward = [this.pos[0] + direction, this.pos[1]];\n  if (!this.board.isOccupied(oneStepForward)) {\n    deltas.push([direction, 0]);\n    if (this.pos[0] === startingRank && !this.board.isOccupied([this.pos[0] + direction*2, this.pos[1]])) {\n      deltas.push([direction * 2, 0]);\n    }\n  }\n  var left = [this.pos[0] + direction, this.pos[1] - 1];\n  var right = [this.pos[0] + direction, this.pos[1] + 1];\n  var b = this.board;\n  if ((b.inBounds(left) && b.isOccupied(left) && b.piece(left).color !== this.color)) {\n    deltas.push([direction, -1]);\n  }\n  if ((b.inBounds(right) && b.isOccupied(right) && b.piece(right).color !== this.color)) {\n    deltas.push([direction, 1]);\n  }\n  if (this.passantAdjacent()) {\n    deltas.push([direction, this.passantAdjacent()]);\n  }\n  return deltas;\n}\n\nPawn.prototype.setPassant = function () {\n  this.passant = this.pawnLeft() || this.pawnRight();\n}\n\nPawn.prototype.toString = function () {\n  return \"pawn\";\n}\n\nPawn.prototype.pawnLeft = function () {\n  var posLeft = [this.pos[0], this.pos[1] - 1];\n  if (this.board.inBounds(posLeft) && this.board.isOccupied(posLeft) && this.board.piece(posLeft).color !== this.color && this.board.piece(posLeft).toString() === \"pawn\") {\n    return true;\n  }\n  return false;\n}\n\nPawn.prototype.pawnRight = function () {\n  var posRight = [this.pos[0], this.pos[1] + 1];\n  if (this.board.inBounds(posRight) && this.board.isOccupied(posRight) && this.board.piece(posRight).color !== this.color && this.board.piece(posRight).toString() === \"pawn\") {\n    return true;\n  }\n  return false;\n}\n\nPawn.prototype.passantAdjacent = function () {\n  var posLeft = [this.pos[0], this.pos[1] - 1];\n  var posRight = [this.pos[0], this.pos[1] + 1];\n  if (this.pawnLeft() && this.board.piece(posLeft).passant) {\n    return -1;\n  } else if (this.pawnRight() && this.board.piece(posRight).passant) {\n    return 1;\n  }\n  return false;\n}\n\nvar Bishop = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  if (this.color === \"white\") {\n    this.board.whitePieces.push(this);\n  } else {\n    this.board.blackPieces.push(this);\n  }\n  this.pos = attrs.pos;\n  this.value = 30;\n  this.moves = Sliding.moves.bind(this);\n  this.board.setPiece(this);\n}\nUtils.inherits(Bishop, Piece);\nBishop.prototype.getMoveDirs = function () {\n  return Piece.DIAGONALS;\n}\nBishop.prototype.toString = function () {\n  return \"bishop\";\n}\n\nvar Knight = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  if (this.color === \"white\") {\n    this.board.whitePieces.push(this);\n  } else {\n    this.board.blackPieces.push(this);\n  }\n  this.pos = attrs.pos;\n  this.value = 30;\n  this.moves = Stepping.moves.bind(this);\n  this.board.setPiece(this);\n}\nUtils.inherits(Knight, Piece);\nKnight.prototype.getMoveDirs = function () {\n  return [[2,1], [-2,1], [-2,-1], [2,-1], [1,2], [1,-2], [-1,2], [-1,-2]];\n}\n\nKnight.prototype.toString = function () {\n  return \"knight\";\n}\n\nvar Rook = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  if (this.color === \"white\") {\n    this.board.whitePieces.push(this);\n  } else {\n    this.board.blackPieces.push(this);\n  }\n  this.pos = attrs.pos;\n  this.moves = Sliding.moves.bind(this);\n  this.board.setPiece(this);\n  this.moved = false;\n  this.value = 50;\n}\nUtils.inherits(Rook, Piece);\nRook.prototype.getMoveDirs = function () {\n  return Piece.CARDINALS;\n}\n\nRook.prototype.toString = function () {\n  return \"rook\";\n}\n\nvar Queen = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  if (this.color === \"white\") {\n    this.board.whitePieces.push(this);\n  } else {\n    this.board.blackPieces.push(this);\n  }\n  this.pos = attrs.pos;\n  this.value = 90;\n  this.moves = Sliding.moves.bind(this);\n  this.board.setPiece(this);\n}\nUtils.inherits(Queen, Piece);\nQueen.prototype.getMoveDirs = function () {\n  return Piece.CARDINALS.concat(Piece.DIAGONALS);\n}\nQueen.prototype.toString = function () {\n  return \"queen\";\n}\n\nvar King = function (attrs) {\n  this.color = attrs.color;\n  this.board = attrs.board;\n  if (this.color === \"white\") {\n    this.board.whitePieces.push(this);\n  } else {\n    this.board.blackPieces.push(this);\n  }\n  this.pos = attrs.pos;\n  this.moves = Stepping.moves.bind(this);\n  this.board.setPiece(this);\n  this.moved = false;\n  this.value = 10000;\n}\nUtils.inherits(King, Piece);\nKing.prototype.getMoveDirs = function () {\n  var deltas = Piece.CARDINALS.concat(Piece.DIAGONALS);\n  var clearLeft = (!this.board.isOccupied([this.pos[0], this.pos[1] - 1]) &&\n                    !this.board.isOccupied([this.pos[0], this.pos[1] - 2]) &&\n                    !this.board.isOccupied([this.pos[0], this.pos[1] - 3]));\n  var clearRight = (!this.board.isOccupied([this.pos[0], this.pos[1] + 1]) &&\n                    !this.board.isOccupied([this.pos[0], this.pos[1] + 2]));\n  var castleLeft = clearLeft &&\n                    !this.moved &&\n                    this.board.piece([this.pos[0], 0]) &&\n                    this.board.piece([this.pos[0], 0]).toString() === \"rook\" &&\n                    !this.board.piece([this.pos[0], 0]).moved;\n  var castleRight = clearRight &&\n                    !this.moved &&\n                    this.board.piece([this.pos[0], 7]) &&\n                    this.board.piece([this.pos[0], 7]).toString() === \"rook\" &&\n                    !this.board.piece([this.pos[0], 7]).moved;\n\n  if (castleLeft) {\n    deltas.push([0, -2]);\n  }\n  if (castleRight) {\n    deltas.push([0, 2]);\n  }\n  return deltas;\n\n}\nKing.prototype.validMove = function (pos) {\n  var moves = this.moves();\n  for (var i = 0; i < moves.length; i++) {\n    if (Utils.arrayEquals(moves[i], pos) && !this.moveThroughCheck(pos)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nKing.prototype.moveThroughCheck = function (move) {\n  if (Math.abs(this.pos[1] - move[1]) === 2) {\n    var dir = this.pos[1] - move[1] === 1 ? -1 : 1;\n    return this.moveIntoCheck(move) || this.moveIntoCheck([this.pos[0], this.pos[1] + dir]);\n  } else {\n    return this.moveIntoCheck(move);\n  }\n\n}\nKing.prototype.toString = function () {\n  return \"king\";\n}\n\nmodule.exports = {\n  Piece: Piece,\n  Pawn: Pawn,\n  Bishop: Bishop,\n  Knight: Knight,\n  Rook: Rook,\n  Queen: Queen,\n  King: King\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/pieces.js\n ** module id = 3\n ** module chunks = 0\n **/","var Utils = {};\n\nUtils.inherits = function (subclass, parentClass) {\n  var Surrogate = function () {};\n  Surrogate.prototype = parentClass.prototype;\n  subclass.prototype = new Surrogate();\n  subclass.prototype.constructor = subclass;\n}\n\nUtils.arrayEquals = function (arr1, arr2) {\n  if (!arr1 || !arr2) {\n    return false;\n  }\n  return arr1[0] === arr2[0] && arr1[1] === arr2[1];\n}\n\nUtils.arrayReduce = function (arr) {\n  sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n\nmodule.exports = Utils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/utils.js\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = {\n  moves: function () {\n    var moves = [];\n    var move;\n    var board = this.board;\n    var dirs = this.getMoveDirs();\n    for (var i = 0; i < dirs.length; i++) {\n      for (var d = 1; d < 8; d++) {\n        move = [this.pos[0] + (dirs[i][0] * d), this.pos[1] + (dirs[i][1] * d)];\n        if (!this.board.inBounds(move)) {\n          break;\n        } else if (this.board.inBounds(move) && !this.board.isOccupied(move)) {\n          moves.push(move);\n        } else if (this.board.isOccupied(move) && this.board.piece(move).color !== this.color) {\n          moves.push(move);\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n    return moves;\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/sliding.js\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = {\n  moves: function () {\n    var moves = [];\n    var board = this.board\n    var dirs = this.getMoveDirs();\n    for (var i = 0; i < dirs.length; i++) {\n      var move = [this.pos[0] + dirs[i][0], this.pos[1] + dirs[i][1]];\n      if (!board.inBounds(move)) {\n        continue;\n      } else if (board.isOccupied(move) && board.piece(move).color !== this.color) {\n        moves.push(move);\n      } else if (!board.isOccupied(move)) {\n        moves.push(move)\n      }\n    }\n    return moves;\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/stepping.js\n ** module id = 6\n ** module chunks = 0\n **/","var BoardNode = require('./boardnode'),\n    Utils = require('./utils');\n\n// Problems:\n// 1. With queen in danger prefers to put you in check than move it.\n// 2. Takes too long\n\n\nvar AI = function (board, color) {\n  this.board = board;\n  this.color = color;\n  this.enemyColor = this.color === \"white\" ? \"black\" : \"white\";\n  this.moveNumber = 0;\n  this.iterations = 0;\n}\n\nAI.prototype.getMove = function () {\n  this.moveNumber += 2;\n  this.iterations = 0;\n  if (this.moveNumber < 5) { return this.getOpeningMove(); }\n  this.moveTree = new BoardNode(this.board, this.color, null, -11000, 11000, 11000);\n  this.currentTurn = this.color;\n  var depth = 3;\n  var totalMoves = this.getAllMoves(this.board.pieces(this.color));\n  if (!this.board.inCheck(this.color)) {\n    if (totalMoves <= 100) {\n      depth = 3;\n    } else if (totalMoves < 18) {\n      depth = 4;\n    } else if (totalMoves < 10) {\n      depth = 5;\n    }\n  }\n  this.buildMoveTree(this.moveTree, depth);\n  // this.alphaBeta(this.moveTree, depth, -11000, 11000, false);\n  var best = this.findBestMove();\n  delete this.bestNode;\n  return best;\n}\n\nAI.prototype.getOpeningMove = function () {\n  if (this.moveNumber === 2) {\n    return [[1,4],[2,4]];\n  }\n  if (this.moveNumber === 4 && this.board.piece([1,3]).validMove([3,3])) {\n    return [[1,3],[3,3]];\n  } else if (this.moveNumber === 4 && this.board.piece([2,4]).validMove([3,3])) {\n    return [[2,4],[3,3]];\n  } else {\n    return [[0,6],[2,5]];\n  }\n}\n\nAI.prototype.buildMoveTree = function (boardNode, depth) {\n  this.iterations += 1;\n  if (depth === 0) { return; }\n  var curColor = boardNode.currentTurn;\n  var nextColor = curColor === \"white\" ? \"black\" : \"white\";\n  var moves = this.getAllMoves(boardNode.board.pieces(curColor));\n  var testboard, move, childNode;\n  for (var i = 0; i < moves.length; i++) {\n    move = moves[i];\n    testboard = boardNode.board.clone();\n    testboard.depth = depth;\n    testboard.move(move.startPos, move.endPos);\n    childNode = boardNode.addChild(testboard, nextColor, move);\n\n///////////// BRUTE FORCE GAME TREE ///////////////\n    this.buildMoveTree(childNode, depth - 1);\n    this.assignNodeValue(childNode);\n///////////////////////////////////////////////////\n\n  //   if (depth === 1) {\n  //     childNode.boardValue = childNode.score();\n  //   }\n  //\n  //   if (nextColor === \"white\" && childNode.boardValue < boardNode.b) {\n  //     boardNode.b = childNode.boardValue;\n  //     boardNode.boardValue = boardNode.b;\n  //   } else if (nextColor === \"black\" && childNode.boardValue > boardNode.a) {\n  //     boardNode.a = childNode.boardValue;\n  //     boardNode.boardValue = boardNode.a;\n  //   }\n  //\n  //   if (childNode.boardValue >= boardNode.a && childNode.boardValue <= boardNode.b) {\n  //     this.buildMoveTree(childNode, depth - 1);\n  //   } else {\n  //     continue;\n  //   }\n  // }\n  // if (boardNode.currentTurn === \"black\") {\n  //   boardNode.parent && (boardNode.parent.a = boardNode.b);\n  // } else {\n  //   boardNode.parent && (boardNode.parent.b = boardNode.a);\n  // }\n  }\n}\n\nAI.prototype.alphaBeta = function (node, depth, a, b, max) {\n  this.iterations += 1;\n  if (depth === 0) {\n    node.boardValue = node.score();\n    return node.boardValue;\n  }\n  if (max) {\n    var val = -11000;\n    var child;\n    var children = node.generateChildren();\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      node.boardValue = Math.max(val, this.alphaBeta(child, depth - 1, node.a, node.b, false));\n      node.a = Math.max(node.a, child.boardValue);\n      if (node.a > node.b) {\n        break;\n      }\n    }\n    node.parent && (node.parent.b = node.a);\n    return node.boardValue;\n  } else {\n    var val = 11000;\n    var child;\n    var children = node.generateChildren();\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      child.boardValue = Math.min(val, this.alphaBeta(child, depth - 1, node.a, node.b, true));\n      node.b = Math.min(node.b, child.boardValue);\n      if (node.a > node.b) {\n        break;\n      }\n    }\n    node.parent && (node.parent.a = node.b);\n    return node.boardValue;\n  }\n}\n\nAI.prototype.assignNodeValue = function (node) {\n  if (node.children.length > 0) {\n    var childValues = node.children.map(function (childNode) {\n      return childNode.boardValue;\n    });\n      if (node.currentTurn === \"white\") {\n      node.boardValue = Math.max.apply(null, childValues);\n    } else {\n      node.boardValue = Math.min.apply(null, childValues);\n    }\n  } else {\n    node.boardValue = node.score();\n  }\n}\n\nAI.prototype.switchTurns = function () {\n  this.currentTurn = this.currentTurn === this.color ? this.enemyColor : this.color;\n}\n\nAI.prototype.findBestMove = function () {\n  console.log(this.iterations);\n  var c = this.moveTree.children;\n  var bestNode;\n  for (var j = 0; j < c.length; j++) {\n    if (!bestNode || c[j].boardValue < bestNode.boardValue) {\n      bestNode = c[j];\n    }\n  }\n  return [bestNode.move.startPos, bestNode.move.endPos];\n}\n\nAI.prototype.getAllMoves = function (pieces) {   //  Returns all possible moves [startPos, endPos] for a set of pieces\n  var allMoves = [];\n  var piece, move, moves;\n  for (var i = 0; i < pieces.length; i++) {\n    piece = pieces[i];\n    moves = piece.moves();\n    for (var j = 0; j < moves.length; j++) {\n      move = moves[j];\n      if (!piece.moveIntoCheck(move)) {\n        allMoves.push({piece: piece, startPos: piece.pos, endPos: move});\n      }\n    }\n  }\n  return allMoves;\n}\n\n\nmodule.exports = AI;\nwindow.AI = AI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/ai.js\n ** module id = 7\n ** module chunks = 0\n **/","var Utils = require('./utils');\n\nvar BoardNode = function (board, color, parent, a, b, v) {\n  this.board = board;\n  this.currentTurn = color;\n  this.children = [];\n  this.boardValue = v;\n  this.parent = parent;\n  this.a = a;\n  this.b = b;\n}\n\nBoardNode.prototype.score = function () {\n  var whitePieces = this.board.pieces(\"white\");\n  var blackPieces = this.board.pieces(\"black\");\n  var whiteScoreArr = whitePieces.map(function (piece) {\n    return piece.value;\n  });\n  var blackScoreArr = blackPieces.map(function (piece) {\n    return piece.value;\n  });\n  var whiteScore = Utils.arrayReduce(whiteScoreArr);\n  var blackScore = Utils.arrayReduce(blackScoreArr);\n  return whiteScore - blackScore;\n}\n\nBoardNode.prototype.addChild = function (board, color, move) {\n  var bv = color === \"white\" ? this.b : this.a\n  var childNode = new BoardNode(board, color, this, this.a, this.b, bv);\n  childNode.move = move;\n  this.children.push(childNode);\n  return childNode;\n}\n\nBoardNode.prototype.generateChildren = function () {\n  var curColor = this.currentTurn;\n  var nextColor = curColor === \"white\" ? \"black\" : \"white\";\n  var moves = this.getAllMoves(this.board.pieces(curColor));\n  var testboard, move, childNode;\n  for (var i = 0; i < moves.length; i++) {\n    move = moves[i];\n    testboard = this.board.clone();\n    testboard.move(move.startPos, move.endPos);\n    childNode = this.addChild(testboard, nextColor, move);\n  }\n  return this.children;\n}\n\nBoardNode.prototype.getAllMoves = function (pieces) {   //  Returns all possible moves [startPos, endPos] for a set of pieces\n  var allMoves = [];\n  var piece, move, moves;\n  for (var i = 0; i < pieces.length; i++) {\n    piece = pieces[i];\n    moves = piece.moves();\n    for (var j = 0; j < moves.length; j++) {\n      move = moves[j];\n      if (!piece.moveIntoCheck(move)) {\n        allMoves.push({piece: piece, startPos: piece.pos, endPos: move});\n      }\n    }\n  }\n  return allMoves;\n}\n\nmodule.exports = BoardNode;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/boardnode.js\n ** module id = 8\n ** module chunks = 0\n **/"],"sourceRoot":""}